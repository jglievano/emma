#+TITLE: My Emacs configuration dubbed "Emma"
#+author: Gabriel Lievano
#+email: gabe@jglievano.com

* Requisites

** Variables

   #+NAME: requisites
   #+BEGIN_SRC emacs-lisp
     (defvar em-savefile-dir (expand-file-name "savehist"
                                               (file-name-directory load-file-name)))
     (if (file-exists-p (expand-file-name "~/.homebrew"))
         (defvar em-local-user-dir (expand-file-name "~/.homebrew/"))
       (defvar em-local-user-dir "/usr/local/"))
   #+END_SRC

** Shell

   #+NAME: requisites
   #+BEGIN_SRC emacs-lisp
     (cond ((file-exists-p "/usr/local/bin/fish")
            (setq explicit-shell-file-name "/usr/local/bin/fish") "/usr/local/bin/fish")
           ((file-exists-p (expand-file-name "~/.homebrew/bin/fish"))
            (setq explicit-shell-file-name (expand-file-name
                                            "~/.homebrew/bin/fish"))))
   #+END_SRC

** Paths

   #+name: requisites
   #+begin_src emacs-lisp
     (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "~/.homebrew/bin")))
     (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "/usr/local/bin")))
     (setq exec-path (append exec-path '((expand-file-name "~/.homebrew/bin"))))
     (setq exec-path (append exec-path '("/usr/local/bin")))
     (unless (file-exists-p em-savefile-dir)
       (make-directory em-savefile-dir))
   #+end_src

** Initialize use-package

Use package is used to install all third-party packages.

#+NAME: pre_requisites
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "use-package"
                                            "~/.emacs/vendor"))
  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Required libraries

#+NAME: pre_requisites
#+BEGIN_SRC emacs-lisp
  (use-package autothemer    :defer t :load-path "vendor/autothemer")
  (use-package dash          :defer t :load-path "vendor/dash")
  (use-package rich-minority :defer t :load-path "vendor/rich-minority")
  (use-package s             :defer t :load-path "vendor/s")
  (use-package with-editor   :defer t :load-path "vendor/with-editor")
#+END_SRC


* Evil

#+NAME: evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :load-path "vendor/evil"
    :init
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))
  (use-package evil-leader
    :load-path "vendor/evil-leader"
    :demand t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key

      ;; buffer
      "bs" 'save-buffer
      "bk" 'ido-kill-buffer

      ;; editing
      "ew" 'whitespace-mode

      ;; file
      "ff" 'ido-find-file
      "fq" 'save-buffers-kill-terminal
      "fs" 'save-buffer

      ;; git
      "gs" 'magit-status

      ;; project
      "pp" 'projectile-switch-project
      "pf" 'projectile-find-file

      ;; search
      "ss" 'swiper
      "sa" 'avy-goto-char-2

      ;; windows
      "wj" 'split-window-below
      "wl" 'split-window-right
      "wq" 'delete-window
      "ww" 'ace-window

      ;; utility
      "mm" 'mu4e
      "x" 'smex
      "X" 'smex-major-mode-commands))
  (use-package evil-surround
    :load-path "vendor/evil-surround"
    :demand t
    :config
    (global-evil-surround-mode 1))
  (use-package evil-magit
    :load-path "vendor/evil-magit"
    :after magit)
  (use-package evil-org-mode
    :load-path "vendor/evil-org-mode"
    :after evil)
#+END_SRC


* Graphics and looks

** Color theme

   Emma uses a theme based on vim's gruvbox. emma-theme is created using
   autothemer.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'emma t)
   #+end_src

** Font

   Emma uses Operator Mono.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 160 :family "Operator Mono" :weight 'light)
     (set-face-attribute 'comint-highlight-prompt nil :inherit nil)
   #+end_src

** Remove Window-y features

   Emma does not like Windows-style UI.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+end_src

** smart-mode-line

   smart-mode-lines looks much cleaner than the default.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (use-package smart-mode-line
       :load-path "vendor/smart-mode-line"
       :commands sml/setup
       :init
       (progn
         (setq sml/no-confirm-load-theme t)
         (sml/setup)
         (sml/apply-theme 'dark)))
   #+end_src

** Display column number

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

** Diminish

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :diminish paredit-mode)
   #+END_SRC

** Better defaults

Start up as org-mode and without any message.

#+NAME: defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'org-mode)
#+END_SRC

Change the directory where backup files are stored and other backup changes.

#+NAME: defaults
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t
        delete-old-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC


* macOS

** exec-path-from-shell
   #+name: macos
   #+begin_src emacs-lisp
     (if (eq system-type 'darwin)
       (use-package exec-path-from-shell
         :load-path "vendor/exec-path-from-shell"
         :commands exec-path-from-shell-initialize
         :config (exec-path-from-shell-initialize)))
   #+end_src


* Editing

** 2 spaces, no tabs
  Emma likes 2 spaces and no tabs.

  #+name: formatting-n-whitespace
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    (setq-default c-basic-offset 2)
    (setq-default css-indent-offset 2)
    (setq-default sh-basic-offset 2
                  sh-indentation 2)
    (require 'whitespace)
  #+end_src

** Rainbow delimiters
   Rainbow delimiters change the games for all those parentheses and brackets.
   This feature is enabled for every programming mode.

   #+name: formatting-n-whitespace
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :load-path "vendor/rainbow-delimiters"
       :commands rainbow-delimiters-mode
       :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src

** Autocompletion

   #+name: editing
   #+begin_src emacs-lisp
     (use-package company
       :load-path "vendor/company-mode"
       :commands global-company-mode
       :config (global-company-mode))
   #+end_src

** Spellcheck

   #+name: editing
   #+begin_src emacs-lisp
     (use-package flycheck
       :load-path "vendor/flycheck"
       :commands global-flycheck-mode
       :config (global-flycheck-mode))
   #+end_src


* Navigation

** Ido

   #+NAME: navigation
   #+BEGIN_SRC emacs-lisp
     (use-package s
       :load-path "vendor/s")
     (use-package memoize
       :load-path "vendor/emacs-memoize")
     (use-package ido)
     (use-package ido-completing-read+
       :after ido
       :load-path "vendor/ido-completing-read-plus")
     (use-package flx-ido
       :after ido
       :load-path "vendor/flx"
       :config
       (setq ido-enable-prefix nil
             ido-enable-flex-matching t
             ido-create-new-buffer 'always
             ido-use-filename-at-point 'guess
             ido-max-prospects 10
             ido-max-directory-size 100000
             ido-save-directory-list-file (expand-file-name
                                           "ido.hist" em-savefile-dir)
             ido-default-file-method 'selected-window
             ido-default-buffer-method 'selected-window
             ido-auto-merge-work-directories-length -1)
       (ido-mode 1)
       (ido-everywhere 1)
       (ido-ubiquitous-mode 1)

       (flx-ido-mode +1)
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil))

     (use-package smex
       :load-path "vendor/smex"
       :bind (("M-x" . smex)
              ("M-X" . smex-major-mode-commands))
       :demand t
       :config
       (setq smex-save-file (expand-file-name ".smex-items" em-savefile-dir))
       (smex-initialize))
   #+END_SRC

** Between windows

   #+name: navigation
   #+begin_src emacs-lisp
     (use-package ace-window
       :load-path "vendor/ace-window"
       :after avy
       :bind ("M-p" . ace-window))
   #+end_src

** Between projects

   #+name: navigation
   #+begin_src emacs-lisp
     (use-package projectile
       :load-path "vendor/projectile"
       :demand t
       :diminish projectile-mode
       :commands projectile-global-mode
       :defer 5
       :bind-keymap ("C-c p" . projectile-command-map)
       :config (projectile-global-mode))
   #+end_src

** Within window to location

   #+name: navigation
   #+begin_src emacs-lisp
    (use-package avy
      :load-path "vendor/avy"
      :demand t
      :bind ("C-c :" . avy-goto-char-2))
  #+end_src

** Swiper suite

   #+name: navigation
   #+begin_src emacs-lisp
     (use-package counsel
       :load-path "vendor/swiper"
       :disabled)
     (use-package ivy
       :load-path "vendor/swiper"
       :after counsel
       :disabled
       :diminish ivy-mode)
     (use-package swiper
       :load-path "vendor/swiper"
       :after ivy
       :demand t
       :bind (("C-s" . swiper)
              ("C-r" . swiper)))
   #+end_src

** Better scrolling

   #+name: navigation
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservately 10000
           scroll-preserve-screen-position 1)
   #+end_src

** Command helper
   which-key provides a good way to assist whenever you forget a key binding.

   #+name: navigation
   #+begin_src emacs-lisp
     (use-package which-key
       :load-path "vendor/which-key"
       :init
       (require 'which-key)
       (which-key-mode)
       :config (setq which-key-idle-delay 0.05))
   #+end_src


* Communications

** IRC

#+NAME: irc
#+BEGIN_SRC emacs-lisp
  (use-package circe
    :load-path "vendor/circe")
#+END_SRC

** Email

#+NAME: email
#+BEGIN_SRC emacs-lisp
  (defvar em-mu4e-load-path (concat em-local-user-dir "share/emacs/site-lisp/mu/mu4e"))
  (message "Using mu4e from %s" em-mu4e-load-path)
  (use-package mu4e
    :load-path em-mu4e-load-path
    :config
    (setq mu4e-mu-binary (concat em-local-user-dir "bin/mu"))
    (setq mu4e-maildir "~/.Maildir")
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "msmtp"
          message-sendmail-envelope-from 'header)
    (setq mu4e-get-mail-command "offlineimap"
          mu4e-compose-context-policy 'ask-if-none
          mu4e-context-policy 'pick-first
          mu4e-view-show-images t
          mu4e-view-image-max-width 800
          mu4e-index-update-in-background nil
          user-full-name "Gabriel Lievano")
    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "Fastmail"
              :match-func
              (lambda (msg) (when msg
                              (string-prefix-p
                               "/jglievano-fastmail.com"
                               (mu4e-message-field msg :maildir))))
              :vars
              '((user-mail-address . "gabe@jglievano.com")
                (mu4e-sent-folder . "/jglievano-fastmail.com/Sent")
                (mu4e-drafts-folder . "/jglievano-fastmail.com/Drafts")
                (mu4e-trash-folder . "/jglievano-fastmail.com/Trash")
                (mu4e-refile-folder . "/jglievano-fastmail.com/Archive")
                (mail-reply-to "gabe@jglievano.com")
                (setq message-sendmail-extra-arguments (list "-a" "Fastmail")))))))
#+END_SRC


* Version Control

** Git
   #+name: version_control
   #+begin_src emacs-lisp
     (use-package magit
       :load-path "vendor/magit/lisp"
       :commands magit-status
       :init
       (require 'magit)
       (with-eval-after-load 'info
         (info-initialize)
         (add-to-list 'Info-directory-list
                      "~/.emacs.d/vendor/magit/Documentation/"))
       :bind ("C-c g" . magit-status))
   #+end_src



* Programming languages
  :PROPERTIES:
  :CATEGORY: programming
  :END:

** Shell

   #+name; programming_languages
   #+begin_src emacs-lisp
     (use-package conf-mode
       :mode (("bashrc\\'" . conf-mode)
              ("offlineimaprc\\'" . conf-mode)
              ("\\.conf\\'" . conf-mode)))
     (use-package fish-mode
       :load-path "vendor/fish-mode"
       :mode "\\.fish\\'")
   #+end_src

** Go

#+NAME: programming_languages
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :load-path "vendor/go-mode.el"
    :mode "\\.go\\'"
    :interpreter ("go" . go-mode))
#+END_SRC

** Json
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package json-snatcher
       :load-path "vendor/json-snatcher")

     (use-package json-mode
       :load-path "vendor/json-mode"
       :mode "\\.json\\'")
   #+end_src

** JavaScript

#+NAME: programming
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :load-path "vendor/js2-mode"
    :mode "\\.js\\'"
    :interpreter ("node" . js2-mode)
    :config
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

** Lisp

#+NAME: lisp
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit"
    "Turn on pseudo-structural editing on Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
#+END_SRC

** Markdown

#+NAME: programming
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :load-path "vendor/markdown-mode"
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** PHP

#+NAME: programming_languages
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :load-path "vendor/php-mode"
    :mode "\\.php\\'"
    :init
    (defun emma-php-setup ()
      (setq tab-width 2
            indent-tabs-mode nil)
      (set (make-local-variable 'show-trailing-whitespace) t)
      (add-hook 'before-saving-hook 'delete-trailing-whitespace nil t)
      (c-set-style "drupal"))
    (add-hook 'php-mode-hook #'emma-php-setup))
#+END_SRC

** Rust
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package rust-mode
       :load-path "vendor/rust-mode"
       :mode "\\.rs\\'"
       :init
       (defun emma-rust-setup ()
         (setq-local rust-indent-offset 2))
       (add-hook 'rust-mode-hook #'emma-rust-setup))
   #+end_src

** SCSS
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package scss-mode
       :load-path "vendor/scss-mode"
       :mode "\\.scss\\'")
   #+end_src

** TOML
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package toml-mode
       :load-path "vendor/toml-mode.el"
       :mode "\\.toml\\'")
   #+end_src

** HTML and friends

   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package web-mode
       :load-path "vendor/web-mode"
       :mode (("\\.phtml\\'" . web-mode)
              ("\\.tpl\\.php\\'" . web-mode)
              ("\\.[agj]sp\\'" . web-mode)
              ("\\.as[cp]x\\'" . web-mode)
              ("\\.erb\\'" . web-mode)
              ("\\.mustache\\'" . web-mode)
              ("\\.djhtml\\'" . web-mode)
              ("\\.html?\\'" . web-mode)
              ("\\.njk\\'" . web-mode)
              ("\\.hbs\\'" . web-mode))
       :config
       (defun my-web-mode-hook ()
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-code-indent-offset 2))
       (add-hook 'web-mode-hook 'my-web-mode-hook))
   #+end_src


* Org

** Keybindings Map
   :PROPERTIES:
   :CATEGORY: keybindings
   :END:

   This keybindings are strongly adapted from [[doc.norang.ca/org-mode.html]].

   | Key     | For                            | Function        | P |
   |---------+--------------------------------+-----------------+---|
   |         | <30>                           | <15>            |   |
   | C-c a   | Agenda                         | org-agenda      | 1 |
   | C-c b   | Switch to org file             | org-iswitchb    | 1 |
   |         | Goto currently clocked item    | org-clock-goto  | 1 |
   | C-c c   | Capture a task                 | org-capture     | 1 |
   | ?       | Clock in a task (show menu with prefix) | org-clock-in    | 2 |
   |         | Check mail                     | mu4e            | 2 |
   | ?-w     | Show todo items for subtree    | em/org-todo     | 2 |
   | ?-W     | Widen                          | em/widen        | 2 |
   | ?-c     | Calendar access                | calendar        | 2 |
   | C-c l   | Store a link for retrieval with C-c C-l | org-store-link  | 2 |
   | C-'     | Goto next org file in org-agenda-files | org-cycle-agenda-files | 3 |
   | ?-r     | Boxquote selected region       | boxquote-region | 3 |
   | ?-t     | Insert inactive timestamp      | em/insert-inactive-timestamp | 3 |
   | ?-v     | Toggle visible mode            | visible-mode    | 3 |
   | ?       | Next buffer                    | next-buffer     | 3 |
   | ?       | Prevoius buffer                | previous-buffer | 3 |
   | C-x n n | Narrow to region               | narrow-to-region | 3 |
   | ?-f     | Boxquote insert a file         | boxquote-insert-file | 3 |
   | ?-I     | Punch clock in                 | em/punch-in     | 3 |
   | ?-O     | Punch clock out                | em/punch-out    | 3 |
   | ?-s     | Switch to scratch buffer       | em/switch-to-scratch | 3 |
   | ?-h     | Hide other tasks               | em/hide-other   | 4 |
   | ?       | Toggle line truncation/wrap    | em/set-truncate-lines | 4 |
   | ?-T     | Toggle insert inactive timesetamp | em/toggle-insert-inactive-timestamp | 4 |
   #+TBLFM: 

** Global keybindings

   #+name: org
   #+begin_src emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-iswitchb)
     (add-hook 'org-mode-hook 'turn-on-font-lock)
     (setq org-support-shift-select 'always)
   #+end_src

** Custom functions

   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     (defun em/hide-other ()
       (interactive)
       (save-excursion
         (org-back-to-heading 'invisible-ok)
         (hide-other)
         (org-cycle)
         (org-cycle)
         (org-cycle)))

     (defun em/switch-to-scratch ()
       (interactive)
       (switch-to-buffer "*scratch*"))

     (defun em/org-todo (arg)
       (interactive "p")
       (if (equal arg 4)
           (save-restriction
             (em/narrow-to-org-subtree)
             (org-show-todo-tree nil))
         (em/narrow-to-org-subtree)
         (org-show-todo-tree nil)))

     (defun em/widen ()
       (interactive)
       (if (equal major-mode 'org-agenda-mode)
           (progn
             (org-agenda-remove-restriction-lock)
             (when org-agenda-sticky
               (org-agenda-redo)))
         (widen)))

     (defun em/narrow-to-org-subtree ()
       (widen)
       (org-narrow-to-subtree)
       (save-restriction
         (org-agenda-set-restriction-lock)))
   #+END_SRC

** Setup

   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-font-lock)
     (setq org-use-fast-todo-selection t)
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)
     (setq org-support-shift-select 'always)
     ;; Agenda setup.
     (require 'org-agenda)
     (setq org-agenda-files '("~/Dropbox/org"
                              "~/GoogleDrive/org"
                              "~/GoogleDrive/org/google"
                              "~/GoogleDrive/org/google-mobile-ninjas"))
   #+END_SRC

** TODO keywords

#+NAME: org
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELED(c@/!)" "PHONE" "MEETING")))

  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("CANCELED" :foreground "forest green" :weight bold)
          ("MEETING" :foreground "forest green" :weight bold)
          ("PHONE" :foreground "forest green" :weight bold)))
#+END_SRC

** TODO state triggers

   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-state-tags-triggers
           '(("CANCELED" ("CANCELED" . t))
             ("WAITING" ("WAITING" . t))
             ("HOLD" ("WAITING") ("HOLD" . t))
             (done ("WAITING") ("HOLD"))
             ("TODO" ("WAITING") ("CANCELED") ("HOLD"))
             ("NEXT" ("WAITING") ("CANCELED") ("HOLD"))
             ("DONE" ("WAITING") ("CANCELED") ("HOLD"))))
   #+END_SRC

** Capture templates

   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org")
     (setq org-default-notes-file "~/Dropbox/org/refile.org")

     ;; Use C-c to start capture mode.
     (global-set-key (kbd "C-c c") 'org-capture)

     ;; Capture templates for: TODO tasks, Notes, Appointments, Phone calls,
     ;; Meetings, and org-protocol.
     (setq org-capture-templates
           '(("t" "Todo" entry (file "~/Dropbox/org/refile.org")
              "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
             ("r" "Respond" entry (file "~/Dropbox/org/refile.org")
              "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
             ("n" "Note" entry (file "~/Dropbox/org/refile.org")
              "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
             ("j" "Journal" entry (file+datetree "~/Dropbox/org/refile.org")
              "* %?\n%U\n" :clock-in t :clock-resume t)
             ("w" "org-protocol" entry (file "~/Dropbox/org/refile.org")
              "* TODO Review %c\n%U\n" :immediate-finish t)
             ("m" "Meeting" entry (file "~/Dropbox/org/refile.org")
              "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
             ("p" "Phone call" entry (file "~/Dropbox/org/refile.org")
              "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
             ("h" "Habit" entry (file "~/Dropbox/org/refile.org")
              "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")))

     ;; Setup to remove empty LOGBOOK drawers if they occur.
     (defun em/remove-empty-drawer-on-clock-out ()
       (interactive)
       (save-excursion
         (beginning-of-line 0)
         (org-remove-empty-drawer-at (point))))
     (add-hook 'org-clock-out-hook 'em/remove-empty-drawer-on-clock-out 'append)
   #+END_SRC

** Refile setup

   #+NAME: org
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)
     (setq org-refile-allow-creating-parent-nodes 'confirm)
     (setq org-completion-use-ido t)

     (defun em/verify-refile-target ()
       "Exclude todo keywords with a done state from refile targets."
       (not (member (nth 2 (org-heading-components)) org-done-keywords)))

     (setq org-refile-target-verify-function 'em/verify-refile-target)
   #+END_SRC

** Custom agenda views

*** Setup

#+NAME: custom_agenda_views
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-compact-blocks t)
  (setq org-agenda-custom-commands
        '(("N" "Notes" tags "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t)))
          ("h" "Habits" tags-todo "STYLE=\"habit\""
           ((org-agenda-overriding-header "Habits")
            (org-agenda-sorting-strategy
             '(todo-state-down effort-up category-keep))))
          (" " "Agenda"
           ((agenda "" nil)
            (tags "REFILE"
                  ((org-agenda-overriding-header "Tasks to Refile")
                   (org-tags-match-list-sublevels nil)))
            (tags-todo "-CANCELED/!"
                       ((org-agenda-overriding-header "Stuck Projects")
                        (org-agenda-skip-functin 'em/skip-non-stuck-projecs)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-HOLD-CANCELED/!"
                       ((org-agenda-overriding-header "Projects")
                        (org-agenda-skip-function 'em/skip-non-projects)
                        (org-tags-match-list-sublevels 'indented)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-CANCELED/!NEXT"
                       ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                              (if em/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'em/skip-projects-and-habits-and-single-tasks)
                        (org-tags-match-list-sublevels t)
                        (org-agenda-todo-ignore-scheduled em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-sorting-strategy
                         '(todo-state-down effort-up category-keep))))
            (tags-todo "-REFILE-CANCELED-WAITING-HOLD/!"
                       ((org-agenda-overriding-header (concat "Project Subtasks"
                                                              (if em/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'em/skip-non-project-tasks)
                        (org-agenda-todo-ignore-scheduled em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date em/hide-scheduled/and-waiting-next-tasks)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-REFILE-CANCELED-WAITING-HOLD/!"
                       ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                              (if em/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'em/skip-project-tasks)
                        (org-agenda-todo-ignore-scheduled 'em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines 'em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date 'em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-CANCELED+WAITING|HOLD/!"
                       ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                              (if em/hide-scheduled-and-waiting-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'em/skip-non-tasks)
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-todo-ignore-scheduled em/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines em/hide-scheduled-and-waiting-next-tasks)))
            (tags "-REFILE/"
                  ((org-agenda-overriding-header "Tasks to Archive")
                   (org-agenda-skip-function 'em/skip-non-archivable-tasks)
                   (org-tags-match-list-sublevels nil))))
           nil)))
#+END_SRC
