#+title: My Emacs configuration dubbed "Emma"
#+author: Gabriel Lievano
#+email: gabe@jglievano.com

* Pre-requisites
** Helper functions
   A function to add vendor paths to load-path.

   #+name: pre_requisites
   #+begin_src emacs-lisp
     (defun add-vendor-to-load-path (vendor)
       (add-to-list 'load-path (expand-file-name vendor "~/.emacs.d/vendor")))
   #+end_src

** Required libraries
*** By smart-mode-line
    #+name: pre_requisites
    #+begin_src emacs-lisp
      (add-vendor-to-load-path "rich-minority")
    #+end_src

*** By magit
    #+name: pre_requisites
    #+begin_src emacs-lisp
      (add-vendor-to-load-path "with-editor")
    #+end_src

** use-package
   Use package is used to install all third-party packages.

   #+name: pre_requisites
   #+begin_src emacs-lisp
     (add-vendor-to-load-path "use-package")
     (eval-when-compile
       (require 'use-package))
   #+end_src

* Graphics and looks
** Color theme
   Emma uses a theme based on vim's gruvbox. emma-theme is created using
   autothemer.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (add-vendor-to-load-path "dash")
     (add-vendor-to-load-path "autothemer")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'emma t)
   #+end_src

** Font
   Emma uses Operator Mono.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 140 :family "Operator Mono" :weight 'light)
   #+end_src

** Remove Window-y features
   Emma does not like Windows-style UI.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+end_src

** smart-mode-line
   smart-mode-lines looks much cleaner than the default.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (use-package smart-mode-line
       :load-path "vendor/smart-mode-line"
       :commands sml/setup
       :init
       (progn
	 (setq sml/no-confirm-load-theme t)
	 (sml/setup)
	 (sml/apply-theme 'dark)))
   #+end_src

** Display column number
   #+NAME: look-and-feel
   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src

* Startup
  Start up as org-mode and without any message.

  #+name: startup
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)
    (setq initial-major-mode 'org-mode)
  #+end_src

* Better backup
  #+name: backup
  #+begin_src emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t
          delete-old-versions 6
	  kept-old-versions 2
	  version-control t)
  #+end_src

* macOS
** exec-path-from-shell
   #+name: macos
   #+begin_src emacs-lisp
     (if (eq system-type 'darwin)
       (use-package exec-path-from-shell
         :load-path "vendor/exec-path-from-shell"
	 :commands exec-path-from-shell-initialize
	 :config (exec-path-from-shell-initialize)))
   #+end_src

* Formatting and whitespace
** 2 spaces, no tabs
  Emma likes 2 spaces and no tabs.

  #+name: formatting-n-whitespace
  #+begin_src emacs-lisp
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq-default c-basic-offset 2)
    (setq-default css-indent-offset 2)
    (require 'whitespace)
  #+end_src

** Rainbow delimiters
   Rainbow delimiters change the games for all those parentheses and brackets.
   This feature is enabled for every programming mode.

   #+name: formatting-n-whitespace
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :load-path "vendor/rainbow-delimiters"
       :commands rainbow-delimiters-mode
       :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src

* Navigation
** Between windows
   #+name: navigation
   #+begin_src emacs-lisp
     (use-package ace-window
       :load-path "vendor/ace-window"
       :after avy
       :bind ("C-c w" . ace-window))
   #+end_src

** Between projects
   #+name: navigation
   #+begin_src emacs-lisp
     (use-package projectile
       :load-path "vendor/projectile"
       :diminish projectile-mode
       :commands projectile-global-mode
       :defer 5
       :bind-keymap ("C-c p" . projectile-command-map)
       :config (projectile-global-mode))
   #+end_src

** Within window to location
   #+name: navigation
   #+begin_src emacs-lisp
    (use-package avy
      :load-path "vendor/avy"
      :bind ("C-c ," . avy-goto-char-2))
  #+end_src

** Swiper suite
   #+name: navigation
   #+begin_src emacs-lisp
     (use-package counsel
       :load-path "vendor/swiper"
       :bind (("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("C-c g" . counsel-git)
	      ("C-c j" . counsel-git-grep)
	      ("C-c k" . counsel-ag)
	      ("C-x l" . counsel-locate)
              ("C-S-o" . counsel-rhythmbox)))
     (use-package ivy
       :load-path "vendor/swiper"
       :after counsel
       :diminish ivy-mode
       :bind (("C-c C-r" . ivy-resume)
              ("C-x b" . ivy-switch-buffer))
       :config
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))
     (use-package swiper
       :load-path "vendor/swiper"
       :after ivy
       :bind (("C-s" . swiper)
              ("C-r" . swiper)))
   #+end_src

** Better scrolling
   #+name: navigation
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
	   scroll-margin 1
	   scroll-step 1
	   scroll-conservately 10000
	   scroll-preserve-screen-position 1)
   #+end_src

** Command helper
   which-key provides a good way to assist whenever you forget a key binding.

   #+name: navigation
   #+begin_src emacs-lisp
     (use-package which-key
       :load-path "vendor/which-key"
       :init
       (require 'which-key)
       (which-key-mode)
       :config (setq which-key-idle-delay 0.3))
   #+end_src

* Editing
** Autocompletion
   #+name: editing
   #+begin_src emacs-lisp
     (use-package company
       :load-path "vendor/company-mode"
       :commands global-company-mode
       :config (global-company-mode))
   #+end_src

** Spellcheck
   #+name: editing
   #+begin_src emacs-lisp
     (use-package flycheck
       :load-path "vendor/flycheck"
       :commands global-flycheck-mode
       :config (global-flycheck-mode))
   #+end_src

* Version Control
** Git
   #+name: version_control
   #+begin_src emacs-lisp
     (use-package magit
       :load-path "vendor/magit/lisp"
       :commands magit-status
       :init
       (require 'magit)
       (with-eval-after-load 'info
         (info-initialize)
	 (add-to-list 'Info-directory-list
	              "~/.emacs.d/vendor/magit/Documentation/"))
       :bind ("C-c g" . magit-status))
   #+end_src

* Lisp
  #+name: lisp
  #+begin_src emacs-lisp
    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing on Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  #+end_src

* Programming languages
** Go
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package go-mode
       :load-path "vendor/go-mode.el"
       :mode "\\.go\\'"
       :interpreter ("go" . go-mode))
   #+end_src

** Json
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package json-mode
       :load-path "vendor/json-mode"
       :mode "\\.json\\'")
   #+end_src

** JavaScript
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package js2-mode
       :load-path "vendor/js-mode"
       :mode "\\.js\\'"
       :interpreter ("node" . js2-mode)
       :config
       (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
    #+end_src

** PHP
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package php-mode
       :load-path "vendor/php-mode"
       :mode "\\.php\\'"
       :init
       (defun emma-php-setup ()
         (setq tab-width 2
	       indent-tabs-mode nil)
	 (set (make-local-variable 'show-trailing-whitespace) t)
	 (add-hook 'before-saving-hook 'delete-trailing-whitespace nil t)
	 (c-set-style "drupal"))
       (add-hook 'php-mode-hook #'emma-php-setup))
    #+end_src

** Rust
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package rust-mode
       :load-path "vendor/rust-mode"
       :mode "\\.rs\\'"
       :init
       (defun emma-rust-setup ()
         (setq-local rust-indent-offset 2))
       (add-hook 'rust-mode-hook #'emma-rust-setup))
   #+end_src

** SCSS
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package scss-mode
       :load-path "vendor/scss-mode"
       :mode "\\.scss\\'")
   #+end_src

** TOML
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package toml-mode
       :load-path "vendor/toml-mode.el"
       :mode "\\.toml\\'")
   #+end_src

** HTML and friends
   #+name: programming_languages
   #+begin_src emacs-lisp
     (use-package web-mode
       :load-path "vendor/web-mode"
       :mode (("\\.phtml\\'" . web-mode)
              ("\\.tpl\\.php\\'" . web-mode)
	      ("\\.[agj]sp\\'" . web-mode)
	      ("\\.as[cp]x\\'" . web-mode)
	      ("\\.erb\\'" . web-mode)
	      ("\\.mustache\\'" . web-mode)
	      ("\\.djhtml\\'" . web-mode)
	      ("\\.html?\\'" . web-mode))
       :config
       (defun my-web-mode-hook ()
         (setq web-mode-markup-indent-offset 2)
	 (setq web-mode-css-indent-offset 2)
	 (setq web-mode-code-indent-offset 2))
       (add-hook 'web-mode-hook 'my-web-mode-hook))
   #+end_src




